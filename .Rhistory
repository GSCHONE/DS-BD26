#1 DONNEES PUBLIQUES, MIS 12/06/2022 VARIABLE Y : https://www.data.gouv.fr/fr/datasets/films-ayant-realise-plus-dun-million-dentrees/
colName=c("titre",
"nationalit?",
"sortie",
"entr?es (millions)",
"rang")
colType=c("numeric","text","text","date","numeric")
data<-data.frame(matrix(nrow=0,ncol=length(colName)))
colnames(data)<-colName
for (k in 2003:2021){
ENTREES<-read_excel("/DATA/1_ENTREES.xlsx",
skip=6,
sheet=as.character(k),
col_types=colType)
names(ENTREES)[1]="rang"
data=rbind(data,ENTREES)
k=k+1
}
data %>%
select(-rang) %>%
rename(Y=`entr?es (millions)`) %>%
arrange(desc(Y))->data
+  +#PROJECT SOURCES
library(readxl)
library(tidyverse)
for (k in 2003:2021){
ENTREES<-read_excel("/DATA/1_ENTREES.xlsx",
skip=6,
sheet=as.character(k),
col_types=colType)
names(ENTREES)[1]="rang"
data=rbind(data,ENTREES)
k=k+1
}
ENTREES<-read_excel("./DATA/1_ENTREES.xlsx",
skip=6,
sheet=as.character(k),
col_types=colType)
data=rbind(data,ENTREES)
k=k+1
ENTREES<-read_excel("./DATA/1_ENTREES.xlsx",
skip=6,
sheet=as.character(k),
col_types=colType)
names(ENTREES)[1]="rang"
data<-data.frame(matrix(nrow=0,ncol=length(colName)))
colnames(data)<-colName
for (k in 2003:2021){
ENTREES<-read_excel("./DATA/1_ENTREES.xlsx",
skip=6,
sheet=as.character(k),
col_types=colType)
names(ENTREES)[1]="rang"
data=rbind(data,ENTREES)
k=k+1
}
data %>%
select(-rang) %>%
rename(Y=`entr?es (millions)`) %>%
arrange(desc(Y))->data
data %>%
select(-rang) %>%
rename(Y=`entrées (millions)`) %>%
arrange(desc(Y))->data
BASE_NOM <- unique(data$titre)
BASE_NOM(is.na(TITRE))
BASE_NOM %>% filter(is.na(TITRE))
data %>% filter(is.na(titre))
data %>% filter(!is.na(titre))->data
data %>% group_by(titre) %>% summarise(totY=sum(Y)) %>% arrange(desc(totY)) %>%
rename(TITRE=titre)->TOT_TITRE
data %>% select(titre,nationalit?,sortie)-> REF_TITRE
data %>% select(titre,nationalité,sortie)-> REF_TITRE
REF_TITRE %>% rename(NAT=nationalité,TITRE=titre,SORTIE=sortie)->REF_TITRE
TOT_TITRE %>% left_join(REF_TITRE)-> DATA_OK
unique(DATA_OK$NAT) #852 noms diff?rents
unique(DATA_OK$TITRE)
REF_TITRE %>% select(-Y) %>%  rename(NAT=nationalité,TITRE=titre,SORTIE=sortie) %>%
group_by(TITRE)->REF_TITRE
data %>% distinct(titre,nationalité,sortie)-> REF_TITRE
unique(REF_TITRE$titre)
REF_TITRE %>% group_by(titre) %>% summarise(n=n()) %>% arrange(desc(n))unique(REF_TITRE$titre)
REF_TITRE %>% group_by(titre) %>% summarise(n=n()) %>% arrange(desc(n))
data %>% filter(titre=="COCO")
REF_TITRE %>% group_by(titre) %>% summarise(n=n()) %>% arrange(desc(n)) %>% filter(n>1)
REF_TITRE %>% group_by(titre) %>% summarise(n=n()) %>% arrange(desc(n)) %>% filter(n>1)->DOUBLON
data %>% filter(titre %in% DOUBLON)
data %>% filter(titre %in% DOUBLON$titre)
data %>% filter(titre %in% DOUBLON$titre) %>% arrange(titre)
REF_TITRE %>% group_by(titre,sortie) %>% summarise(n=n()) %>% arrange(desc(n)) %>% filter(n>1)->DOUBLON
data %>% filter(titre %in% DOUBLON$titre) %>% arrange(titre)
REF_TITRE %>% select(-nationalité) %>% group_by(titre,sortie) %>% summarise(n=n()) %>% arrange(desc(n)) %>% filter(n>1)->DOUBLON
data %>% filter(titre %in% DOUBLON$titre) %>% arrange(titre)
data %>% group_by(titre,sortie) %>% summarise(totY=sum(Y)) %>% arrange(desc(totY)) %>%
rename(TITRE=titre)->TOT_TITRE
data %>% distinct(titre,sortie)-> REF_TITRE
REF_TITRE %>% select(-Y) %>%  rename(NAT=nationalité,TITRE=titre,SORTIE=sortie) %>%
group_by(TITRE)->REF_TITRE
REF_TITRE %>% select(-nationalité) %>% group_by(titre,sortie) %>% summarise(n=n()) %>% arrange(desc(n)) %>% filter(n>1)->DOUBLON
unique(REF_TITRE$titre)
TOT_TITRE %>% group_by(titre) %>% summarise(n=(n)) %>% select(n>1)
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=(n)) %>% select(n>1)
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% select(n>1)
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% filter(n>1) %>% arrange(desc(n))
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% filter(n>1) %>% arrange(desc(n))->DOUBLON
data %>% filter(titre %in% DOUBLON$TITRE)
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% filter(n>1) %>% arrange(desc(n))
TOT_TITRE %>% filter(titre %in% DOUBLON$TITRE)
TOT_TITRE %>% filter(TITRE %in% DOUBLON$TITRE)
data %>% group_by(titre,sortie) %>% summarise(totY=sum(Y),.groups = 'drop') %>% arrange(desc(totY)) %>%
rename(TITRE=titre)->TOT_TITRE
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% filter(n>1) %>% arrange(desc(n))->DOUBLON
TOT_TITRE %>% filter(TITRE %in% DOUBLON$TITRE)
data %>% filter(titre %in% DOUBLON$TITRE)
+  +#PROJECT SOURCES
library(readxl)
library(tidyverse)
#1 DONNEES PUBLIQUES, MIS 12/06/2022 VARIABLE Y : https://www.data.gouv.fr/fr/datasets/films-ayant-realise-plus-dun-million-dentrees/
COL_NAME=c("titre",
"nationalit?",
"sortie",
"entr?es (millions)",
"rang")
COL_TYPE=c("numeric","text","text","date","numeric")
DATA<-data.frame(matrix(nrow=0,ncol=length(COL_NAME)))
colnames(DATA)<-COL_NAME
for (k in 2003:2021){
ENTREES<-read_excel("./DATA/1_ENTREES.xlsx",
skip=6,
sheet=as.character(k), #k définit l'onlet du fichier EXCEL
col_types=COL_TYPE)
names(ENTREES)[1]="rang" ###DEFAU DE NOMMAGE DES PREMIERES COLONNES. RENOMMER SYSTEMATIQUEMENT PERMET D'EVITER LES ERREURS
DATA=rbind(DATA,ENTREES) ### ON AJOUTE ONGLET PAR ONGLET LES DONNEES
k=k+1
}
DATA %>%
select(-rang) %>%
rename(Y=`entrées (millions)`) %>%
rename(NAT=nationalité) %>%
arrange(desc(Y))->DATA
###ATTENTION ECARTS AVEC LES VRAIS DATA --> ON VA ALLER REQUETER LES NOMS DES FILMS LISTES
BASE_NOM <- unique(data$titre)
DATA %>% filter(!is.na(titre))->DATA
DATA %>%
group_by(titre,sortie) %>%
summarise(totY=sum(Y),.groups = 'drop') %>%
rename(TITRE=titre)->TOT_TITRE
#WARNING PROBLEME DE DOUBLON DANS LES TITRES
unique(REF_TITRE$titre)
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% filter(n>1) %>% arrange(desc(n))->DOUBLON
TOT_TITRE %>% filter(TITRE %in% DOUBLON$TITRE)
data %>% filter(titre %in% DOUBLON$TITRE)
### 2 FILMS EN DOUBLONS, COCO DESSIN ANIMEE ET CELUI AVEC GAD ELMALEH NON ?  // 4 FANTASTIQUES IDEM , DEUX FILMS 2015 ET 2005
write.csv(TOT_TITRE,"/DATA_CLEAN/FILMS_1MILLIONS.csv")
write.csv(TOT_TITRE,"./DATA_CLEAN/FILMS_1MILLIONS.csv")
View(TOT_TITRE)
DATA %>%
group_by(titre,sortie) %>%
summarise(Y=sum(Y),.groups = 'drop') %>%
rename(TITRE=titre)->TOT_TITRE
unique(REF_TITRE$titre)
TOT_TITRE %>% group_by(TITRE) %>% summarise(n=n()) %>% filter(n>1) %>% arrange(desc(n))->DOUBLON
TOT_TITRE %>% filter(TITRE %in% DOUBLON$TITRE)
data %>% filter(titre %in% DOUBLON$TITRE)
write.csv(TOT_TITRE,"./DATA_CLEAN/FILMS_1MILLIONS.csv")
TOT_TITRE %>% arrange(desc(totY))
TOT_TITRE %>% arrange(desc(Y))
year(TOT_TITRE[1,"sortie"]
)
TOT_TITRE[1,"sortie"]
TOT_TITRE[1,"sortie"]$sortie
x=TOT_TITRE[1,"sortie"]$sortie
x.year()
library(lubridate)
nom=paste(TOT_TITRE[k,"TITRE"],year(TOT_TITRE[k,"sortie"])
}
https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/inception 2010
print(nom)
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(TOT_TITRE[k,"sortie"])]
print(nom)
}
https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/inception 2010
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(TOT_TITRE[k,"sortie"])]
print(nom)
}
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(TOT_TITRE[k,"sortie"])])
print(nom)
}
nom=paste(TOT_TITRE[k,"TITRE"],year(TOT_TITRE[k,"sortie"]))
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(TOT_TITRE[k,"sortie"]))
print(nom)
}
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"])))
TOT_TITRE[k,"sortie"]
substr(TOT_TITRE[k,"sortie"],1,4]
substr(TOT_TITRE[k,"sortie"],1,4)
Year(TOT_TITRE[k,"sortie"],1,4)
year(TOT_TITRE[k,"sortie"],1,4)
year(TOT_TITRE[k,"sortie"])
class(TOT_TITRE$sortie)
x=TOT_TITRE[k,"sortie"]
format(x,"%Y")
format(x,format="%Y")
x=as.POSIXct(secondSince, tz = "UTC", origin="1970-01-01")
truc(x,"year")
trunc(x,"year")
TOT_TITRE %>% filter(is.na(sortinameUI <- function(id) {
ns <- NS(id)
tagList(
)
}
nameServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
}
)
}))
TOT_TITRE %>% filter(is.na(sortie))
years(x)
format(year(x))
as.date(x)
as.Date(x)
as.Date(as.POSIXct(x, 'GMT'))
as.Date(x)
as.Date(x$sortie)
year(as.Date(x$sortie))
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
print(nom)
}
library(httr)
library(json)
k=1
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
URL=paste0("https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/",nom)
result=GET(URL)
View(result)
result_jon=fromJSON(rawToChar(result$content))}
result_jon=fromJSON(rawToChar(result$content))
library(rjson)
result_jon=fromJSON(rawToChar(result$content))
View(result_jon)
for (k in 1:nrow(TOT_TITRE)){
k=1
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
URL=paste0("https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/",nom)
result=GET(URL)
result_jon=fromJSON(rawToChar(result$content))
TOT_TITRE$id=result_jon$results[[1]]$id
}
View(TOT_TITRE)
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
URL=paste0("https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/",nom)
result=GET(URL)
result_jon=fromJSON(rawToChar(result$content))
TOT_TITRE$id=result_jon$results[[1]]$id
TOT_TITRE$IMAGE=result_jon$results[[1]]$image
}
View(result_jon)
result_jon
View(result_jon)
dim(result_jon$results)
for (k in 1:nrow(TOT_TITRE)){
if(is.null(dim(result_jon$results))){
TOT_TITRE$id="INCONNU"
}else{
TOT_TITRE$id=result_jon$results[[1]]$id
}
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
print(nom)
URL=paste0("https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/",nom)
result=GET(URL)
result_jon=fromJSON(rawToChar(result$content))
if(is.null(dim(result_jon$results))){
TOT_TITRE$id="INCONNU"
}else{
TOT_TITRE$id=result_jon$results[[1]]$id
}
}
for (k in 1:nrow(TOT_TITRE)){
nom=paste(TOT_TITRE[k,"TITRE"],year(as.Date(TOT_TITRE[k,"sortie"]$sortie)))
print(nom)
URL=paste0("https://imdb-api.com/en/API/SearchMovie/k_04ykrtva/",nom)
result=GET(URL)
result_jon=fromJSON(rawToChar(result$content))
if(is.null(dim(result_jon$results))){
TOT_TITRE$id="INCONNU"
}else{
TOT_TITRE$id=result_jon$results[[1]]$id
}
}
View(result_jon)
View(result)
print(nom)
TOT_TITRE %>% filter(!is.na(id))
TOT_TITRE %>% filter(!is.na(id)&id!="INCONNU")
