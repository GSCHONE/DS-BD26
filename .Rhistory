View(Team)
View(Player_L)
View(Match_PL)
View(DON)
dim(don)
getwd()
dim(DON)
getwd()
View(Team)
View(ListMatch)
summary(DON)
View(Match_PL)
View(Match_PL)
View(Player_Attributes_L)
View(Match_PL)
library(RSQLite)
install.packages(RSQLite)
install.packages(tidyverse)
install.packages(lubridate)
install.packages("RSQLite")
library(tidyverse)
library(lubridate)
#NB ATTENTION impossible à charger sur le GIT trop volumineux
#repertoirePerso pour les données volumineuses REP
rep= "U:/DATASCIENCE/DS-BD26/"
file="database.sqlite"
load("U:/GitHub/DS-BD26/.RData")
#DON=DON_BK
DON %>%
select(-ends_with("id")) %>%
select(-starts_with("Home_Player")) %>%
select(-starts_with("Away_Player")) -> DON
source('U:/GitHub/DS-BD26/DATA.R', encoding = 'UTF-8', echo=TRUE)
load("U:/GitHub/DS-BD26/.RData")
#DON=DON_BK
DON %>%
select(-ends_with("id")) %>%
select(-starts_with("Home_Player")) %>%
select(-starts_with("Away_Player")) -> DON
library(tidyverse)
library(lubridate)
#DON=DON_BK
DON %>%
select(-ends_with("id")) %>%
select(-starts_with("Home_Player")) %>%
select(-starts_with("Away_Player")) -> DON
DON %>% filter(! season %in% c("2009/2010","2008/2009" ))-> DON
DON %>% select(-c(season,stage,goal,shoton,shotoff,foulcommit,card,cross,corner,possession))->DON
colnames(DON) [1:40]
DON %>% select(-(4:33))-> DON
# DON %>% filter(!season)
DON %>% select(-ends_with("PlayDribbling"))-> DON
DON %>% select(-ends_with("player_name"))-> DON
DON %>% mutate_if(is.character,as.factor)->DON
for (k in 1:11){
DON[[paste0("A",k,"_age")]]=round(time_length(interval(DON[[paste0("A",k,"_birthday")]],DON$date),"years"),0)
DON[[paste0("H",k,"_age")]]=round(time_length(interval(DON[[paste0("H",k,"_birthday")]],DON$date),"years"),0)
}
DON %>% select(-ends_with("birthday"))-> DON
DON %>% select(-date)->DON
DON_BK=DON
DON %>% mutate(Y=case_when(
home_team_goal>away_team_goal~"H",
home_team_goal<away_team_goal~"A",
TRUE~"D")) -> DON_CLASS
DON_CLASS %>% select(-c(home_team_goal,away_team_goal))->DON_CLASS
DON_H=DON_BK
DON_A=DON_BK
DON_H %>% mutate(Y=home_team_goal)->DON_H
DON_H%>% select(-home_team_goal,away_team_goal)->DON_H
DON_A %>% mutate(Y=away_team_goal)->DON_A
DON_A%>% select(-home_team_goal,away_team_goal)->DON_A
colnames(DON)[1:50]
DON_VL=DON_BK
DON_TEAM=DON_VL %>% select(1:42)
DON_PLAYER=DON_VL %>% select(-c(1:42))
DON_VL=DON_BK
DON_VL %>% select(1:42)
DON_TEAM=DON_VL %>% select(1:42)
DON_PLAYER=DON_VL %>% select(-c(1:42))
DON_PLAYER %>% select(matches(c("potential","overall_rating")))->DON_PLAYER
DON_VL=cbind(DON_TEAM,DON_PLAYER)
DON_VL %>% mutate(Y=case_when(
home_team_goal>away_team_goal~"H",
home_team_goal<away_team_goal~"A",
TRUE~"D")) -> DON_VL_CLASS
DON_VL_CLASS %>% select(-c(home_team_goal,away_team_goal))->DON_VL_CLASS
DON_VL %>% mutate(Y=home_team_goal)->DON_VL_H
DON_VL_H%>% select(-c(home_team_goal,away_team_goal))->DON_VL_H
DON_VLL_H=DON_VL_H
DON_VLL_H %>% select(-matches("Home"))->DON_VLL_H
DON_VLL_H %>% select(-matches("H\\d+_"))->DON_VLL_H
DON_VL %>% mutate(Y=away_team_goal)->DON_VL_A
DON_VL_A%>% select(-c(home_team_goal,away_team_goal))->DON_VL_A
DON_VLL_A=DON_VL_A
DON_VLL_A %>% select(-matches("Away"))->DON_VLL_A
DON_VLL_A %>% select(-matches("A\\d+_"))->DON_VLL_A
DON_VLL_CLASS$Y=as.factor(DON_VLL_CLASS$Y)
DON_VL_CLASS$Y=as.factor(DON_VL_CLASS$Y)
#####COMPARAISON d'algor de régression
library(rpart)
library(randomForest)
library(glmnet)
#################################
XX <- model.matrix(Y~.,data=don)
#don <- read.table("SAheart.data",header=T,sep=",",
don=DON             #     stringsAsFactors = T,row.names = 1)
#################################
XX <- model.matrix(Y~.,data=don)
DON$Y[1]
#don <- read.table("SAheart.data",header=T,sep=",",
don=DON_VL_CLASS             #     stringsAsFactors = T,row.names = 1)
DON$Y[1]
##on recode chd
#don$Y <- as.factor(don$chd)
#don$chd=NULL
summary(don)
#####COMPARAISON d'algor de régression
don=don[which(rowSums(is.na()!=0))]
don=don[which(rowSums(is.na(don))==0)]
don=don[which(rowSums(is.na(don))==0)]
don=don[which(rowSums(is.na(don))==0),]
#################################
XX <- model.matrix(Y~.,data=don)
levels(DON)
dim(don)
dim(don)[2]
for (k in 1:dim(don)[2]){
print(k)
print(levels(don[,k]))
}
colnames(don[,20])
colnames(don)[20]
colnames(don)[20]
don$Home_defenceDefenderLineClass
table(don$Home_defenceDefenderLineClass)
don=don[-20]
#don <- read.table("SAheart.data",header=T,sep=",",
don=DON_VL_CLASS             #     stringsAsFactors = T,row.names = 1)
don=don[-20,]
#don <- read.table("SAheart.data",header=T,sep=",",
don=DON_VL_CLASS             #     stringsAsFactors = T,row.names = 1)
don=don[,-20]
#################################
XX <- model.matrix(Y~.,data=don)
for (k in 1:dim(don)[2]){
print(k)
print(levels(don[,k]))
}
colnames(don)[39]
table(don$Away_defenceDefenderLineClass)
don=don[,-39]
#####COMPARAISON d'algor de régression
don=don[which(rowSums(is.na(don))==0),]
#################################
XX <- model.matrix(Y~.,data=don)
YY <- don$Y
#######################################
##création de blocs
nb <- 10
set.seed(1234)
blocs <- sample(rep(1:nb,length=nrow(don)))
RES <- data.frame(Y=don$Y)
save.image("U:/GitHub/DS-BD26/.RData")
for(ii in 1:nb){
print(ii)
### DECOUPAGE
donA <- don[blocs!=ii,]
donT <- don[blocs==ii,]
XXA <- XX[blocs!=ii,]
XXT <- XX[blocs==ii,]
YYA <- YY[blocs!=ii]
#######################
## Algo 1 reg log
########################
tmp <- glm(Y~.,data=donA,family="binomial")
RES[blocs==ii,"log"] <- predict(tmp,donT,type="response")
#######################
## Algo  STEP AIC MCO
########################
tmp <- glm(Y~.,data=donA,family="binomial")
modAIC <- step(tmp,trace=0)
RES[blocs==ii,"AIC"] <- predict(modAIC,donT,type="response")
#######################
## Algo  STEP BIC MCO
########################
#tmp <- lm(Y~.,data=donA)
#modBIC <- step(tmp,trace=0,k=log(nrow(donA)))
#RES[blocs==ii,"BIC"] <- predict(modBIC,donT)
#######################
## Algo  arbre
########################
tmp <- rpart(Y~.,data=donA)
RES[blocs==ii,"arbre"] <- predict(tmp,donT)[,2]
#######################
## Algo  foret
########################
tmp <- randomForest(Y~.,data=donA)
RES[blocs==ii,"foret"] <- predict(tmp,donT,type="prob")[,2]
#######################
## Algo  ridge
########################
tmp <- cv.glmnet(XXA,YYA,alpha=0,family="binomial")
RES[blocs==ii,"ridgemin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"ridge1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
#######################
## Algo  lasso
########################
tmp <- cv.glmnet(XXA,YYA,alpha=1,family="binomial")
RES[blocs==ii,"lassomin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"lasso1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
#######################
## Algo  elastic
########################
tmp <- cv.glmnet(XXA,YYA,alpha=0.5,family="binomial")
RES[blocs==ii,"elasmin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"elas1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
}
#################################
XX <- model.matrix(Y~.,data=don)
YY <- don$Y
#######################################
##création de blocs
nb <- 10
set.seed(1234)
blocs <- sample(rep(1:nb,length=nrow(don)))
RES <- data.frame(Y=don$Y)
for(ii in 1:nb){
print(ii)
### DECOUPAGE
donA <- don[blocs!=ii,]
donT <- don[blocs==ii,]
XXA <- XX[blocs!=ii,]
XXT <- XX[blocs==ii,]
YYA <- YY[blocs!=ii]
#######################
## Algo 1 reg log
########################
tmp <- glm(Y~.,data=donA,family="binomial")
RES[blocs==ii,"log"] <- predict(tmp,donT,type="response")
#######################
## Algo  STEP AIC MCO
########################
tmp <- glm(Y~.,data=donA,family="binomial")
modAIC <- step(tmp,trace=0)
RES[blocs==ii,"AIC"] <- predict(modAIC,donT,type="response")
#######################
## Algo  STEP BIC MCO
########################
#tmp <- lm(Y~.,data=donA)
#modBIC <- step(tmp,trace=0,k=log(nrow(donA)))
#RES[blocs==ii,"BIC"] <- predict(modBIC,donT)
#######################
## Algo  arbre
########################
tmp <- rpart(Y~.,data=donA)
RES[blocs==ii,"arbre"] <- predict(tmp,donT)[,2]
#######################
## Algo  foret
########################
tmp <- randomForest(Y~.,data=donA)
RES[blocs==ii,"foret"] <- predict(tmp,donT,type="prob")[,2]
#######################
## Algo  ridge
########################
tmp <- cv.glmnet(XXA,YYA,alpha=0,family="multinomial")
RES[blocs==ii,"ridgemin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"ridge1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
#######################
## Algo  lasso
########################
tmp <- cv.glmnet(XXA,YYA,alpha=1,family="multinomial")
RES[blocs==ii,"lassomin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"lasso1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
#######################
## Algo  elastic
########################
tmp <- cv.glmnet(XXA,YYA,alpha=0.5,family="binomial")
RES[blocs==ii,"elasmin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"elas1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
}
for(ii in 1:nb){
print(ii)
### DECOUPAGE
donA <- don[blocs!=ii,]
donT <- don[blocs==ii,]
XXA <- XX[blocs!=ii,]
XXT <- XX[blocs==ii,]
YYA <- YY[blocs!=ii]
#######################
## Algo 1 reg log
########################
tmp <- glm(Y~.,data=donA,family="binomial")
RES[blocs==ii,"log"] <- predict(tmp,donT,type="response")
#######################
## Algo  STEP AIC MCO
########################
tmp <- glm(Y~.,data=donA,family="binomial")
modAIC <- step(tmp,trace=0)
RES[blocs==ii,"AIC"] <- predict(modAIC,donT,type="response")
#######################
## Algo  STEP BIC MCO
########################
#tmp <- lm(Y~.,data=donA)
#modBIC <- step(tmp,trace=0,k=log(nrow(donA)))
#RES[blocs==ii,"BIC"] <- predict(modBIC,donT)
#######################
## Algo  arbre
########################
tmp <- rpart(Y~.,data=donA)
RES[blocs==ii,"arbre"] <- predict(tmp,donT)[,2]
#######################
## Algo  foret
########################
tmp <- randomForest(Y~.,data=donA)
RES[blocs==ii,"foret"] <- predict(tmp,donT,type="prob")[,2]
#######################
## Algo  ridge
########################
tmp <- cv.glmnet(XXA,YYA,alpha=0,family="multinomial")
RES[blocs==ii,"ridgemin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"ridge1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
#######################
## Algo  lasso
########################
tmp <- cv.glmnet(XXA,YYA,alpha=1,family="multinomial")
RES[blocs==ii,"lassomin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"lasso1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
#######################
## Algo  elastic
########################
tmp <- cv.glmnet(XXA,YYA,alpha=0.5,family="multinomial")
RES[blocs==ii,"elasmin"] <- predict(tmp,XXT,s="lambda.min",type="response")
RES[blocs==ii,"elas1se"] <- predict(tmp,XXT,s="lambda.1se",type="response")
}
saveRDS(RES,"resCLASUP.RDS")
View(RES)
